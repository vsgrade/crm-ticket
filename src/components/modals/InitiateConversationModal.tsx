import { useState } from "react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import {
  Dialog,
  DialogContent,
  DialogDescription,
  DialogFooter,
  DialogHeader,
  DialogTitle,
} from "@/components/ui/dialog";
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from "@/components/ui/select";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { MessageSquare, Send, Phone, Mail, MessageCircle } from "lucide-react";
import { useToast } from "@/hooks/use-toast";

interface InitiateConversationModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  clientId?: string;
}

const InitiateConversationModal = ({ open, onOpenChange, clientId }: InitiateConversationModalProps) => {
  const { toast } = useToast();
  
  const [selectedChannel, setSelectedChannel] = useState('');
  const [subject, setSubject] = useState('');
  const [message, setMessage] = useState('');
  const [priority, setPriority] = useState('medium');

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –∫–ª–∏–µ–Ω—Ç–∞
  const clientData = {
    id: clientId || '1',
    name: '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –ò–≤–∞–Ω–æ–≤',
    company: '–û–û–û "–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏"',
    email: 'alex.ivanov@tech.com',
    phone: '+7 (999) 123-45-67',
    availableChannels: [
      { id: 'telegram', name: 'Telegram', icon: 'üì±', status: 'online' },
      { id: 'whatsapp', name: 'WhatsApp', icon: 'üí¨', status: 'online' },
      { id: 'email', name: 'Email', icon: 'üìß', status: 'available' },
      { id: 'sms', name: 'SMS', icon: 'üì®', status: 'available' },
      { id: 'phone', name: '–¢–µ–ª–µ—Ñ–æ–Ω', icon: 'üìû', status: 'available' }
    ]
  };

  const messageTemplates = [
    {
      id: 'greeting',
      name: '–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ú–µ–Ω—è –∑–æ–≤—É—Ç {agent_name}, —è —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç —Å–ª—É–∂–±—ã –ø–æ–¥–¥–µ—Ä–∂–∫–∏. –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Ä–µ—à–∏—Ç—å –ª—é–±—ã–µ –≤–æ–ø—Ä–æ—Å—ã.'
    },
    {
      id: 'follow_up',
      name: '–£—Ç–æ—á–Ω–µ–Ω–∏–µ',
      content: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –•–æ—Ç–µ–ª –±—ã —É—Ç–æ—á–Ω–∏—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –æ–±—Ä–∞—â–µ–Ω–∏—è –∏ —É–∑–Ω–∞—Ç—å, –µ—Å—Ç—å –ª–∏ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã.'
    },
    {
      id: 'update',
      name: '–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ',
      content: '–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –•–æ—á—É –ø—Ä–æ–∏–Ω—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å –≤–∞—Å –æ–± –∏–∑–º–µ–Ω–µ–Ω–∏—è—Ö –≤ –≤–∞—à–µ–º –∑–∞–∫–∞–∑–µ/–æ–±—Ä–∞—â–µ–Ω–∏–∏.'
    },
    {
      id: 'survey',
      name: '–û–ø—Ä–æ—Å',
      content: '–î–æ–±—Ä—ã–π –¥–µ–Ω—å! –ù–µ –º–æ–≥–ª–∏ –±—ã –≤—ã –æ—Ü–µ–Ω–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ –Ω–∞—à–µ–≥–æ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏—è? –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –æ—á–µ–Ω—å –≤–∞–∂–Ω–æ –¥–ª—è –Ω–∞—Å.'
    }
  ];

  const handleChannelSelect = (channelId: string) => {
    setSelectedChannel(channelId);
  };

  const handleTemplateSelect = (templateContent: string) => {
    setMessage(templateContent.replace('{agent_name}', '–ê–Ω–Ω–∞ –°–∏–¥–æ—Ä–æ–≤–∞'));
  };

  const handleSend = () => {
    if (!selectedChannel || !subject || !message) {
      toast({
        title: "–û—à–∏–±–∫–∞",
        description: "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è",
        variant: "destructive"
      });
      return;
    }

    const channelName = clientData.availableChannels.find(c => c.id === selectedChannel)?.name;
    
    toast({
      title: "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ",
      description: `–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É —á–µ—Ä–µ–∑ ${channelName}`,
    });
    
    // –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π —Ç–∏–∫–µ—Ç –∏–∑ –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –ø–µ—Ä–µ–ø–∏—Å–∫–∏
    setTimeout(() => {
      toast({
        title: "–¢–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω",
        description: "–ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç —Å–æ–∑–¥–∞–Ω –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è",
      });
    }, 1500);
    
    onOpenChange(false);
  };

  const getStatusColor = (status: string) => {
    switch (status) {
      case 'online':
        return 'default';
      case 'available':
        return 'secondary';
      case 'offline':
        return 'outline';
      default:
        return 'outline';
    }
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5" />
            –ò–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞—Ç—å –ø–µ—Ä–µ–ø–∏—Å–∫—É —Å –∫–ª–∏–µ–Ω—Ç–æ–º
          </DialogTitle>
          <DialogDescription>
            –ù–∞—á–Ω–∏—Ç–µ –¥–∏–∞–ª–æ–≥ —Å –∫–ª–∏–µ–Ω—Ç–æ–º —á–µ—Ä–µ–∑ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞–Ω–∞–ª—ã —Å–≤—è–∑–∏
          </DialogDescription>
        </DialogHeader>

        <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ –∏ –∫–∞–Ω–∞–ª–µ */}
          <div className="space-y-6">
            {/* –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">–ö–ª–∏–µ–Ω—Ç</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-2">
                  <div className="font-medium">{clientData.name}</div>
                  <div className="text-sm text-muted-foreground">{clientData.company}</div>
                  <div className="text-sm">{clientData.email}</div>
                  <div className="text-sm">{clientData.phone}</div>
                </div>
              </CardContent>
            </Card>

            {/* –í—ã–±–æ—Ä –∫–∞–Ω–∞–ª–∞ —Å–≤—è–∑–∏ */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">–ö–∞–Ω–∞–ª —Å–≤—è–∑–∏</CardTitle>
              </CardHeader>
              <CardContent className="space-y-3">
                {clientData.availableChannels.map((channel) => (
                  <div
                    key={channel.id}
                    className={`p-3 border rounded-lg cursor-pointer transition-colors ${
                      selectedChannel === channel.id 
                        ? 'border-primary bg-primary/5' 
                        : 'border-border hover:border-primary/50'
                    }`}
                    onClick={() => handleChannelSelect(channel.id)}
                  >
                    <div className="flex items-center justify-between">
                      <div className="flex items-center gap-3">
                        <span className="text-lg">{channel.icon}</span>
                        <div>
                          <div className="font-medium">{channel.name}</div>
                          <div className="text-xs text-muted-foreground">
                            {channel.status === 'online' ? '–í —Å–µ—Ç–∏' : 
                             channel.status === 'available' ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–ù–µ –≤ —Å–µ—Ç–∏'}
                          </div>
                        </div>
                      </div>
                      <Badge variant={getStatusColor(channel.status)}>
                        {channel.status === 'online' ? '–û–Ω–ª–∞–π–Ω' : 
                         channel.status === 'available' ? '–î–æ—Å—Ç—É–ø–µ–Ω' : '–û—Ñ–ª–∞–π–Ω'}
                      </Badge>
                    </div>
                  </div>
                ))}
              </CardContent>
            </Card>

            {/* –®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π */}
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">–®–∞–±–ª–æ–Ω—ã —Å–æ–æ–±—â–µ–Ω–∏–π</CardTitle>
              </CardHeader>
              <CardContent className="space-y-2">
                {messageTemplates.map((template) => (
                  <Button
                    key={template.id}
                    variant="outline"
                    className="w-full justify-start text-left h-auto p-3"
                    onClick={() => handleTemplateSelect(template.content)}
                  >
                    <div>
                      <div className="font-medium">{template.name}</div>
                      <div className="text-xs text-muted-foreground truncate">
                        {template.content.substring(0, 60)}...
                      </div>
                    </div>
                  </Button>
                ))}
              </CardContent>
            </Card>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞ - —Ñ–æ—Ä–º–∞ —Å–æ–æ–±—â–µ–Ω–∏—è */}
          <div className="space-y-6">
            <Card>
              <CardHeader>
                <CardTitle className="text-sm">–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ</CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div>
                  <Label htmlFor="subject">–¢–µ–º–∞ *</Label>
                  <Input
                    id="subject"
                    value={subject}
                    onChange={(e) => setSubject(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—è"
                  />
                </div>

                <div>
                  <Label htmlFor="priority">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</Label>
                  <Select value={priority} onValueChange={setPriority}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      <SelectItem value="low">–ù–∏–∑–∫–∏–π</SelectItem>
                      <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                      <SelectItem value="high">–í—ã—Å–æ–∫–∏–π</SelectItem>
                      <SelectItem value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                    </SelectContent>
                  </Select>
                </div>

                <div>
                  <Label htmlFor="message">–°–æ–æ–±—â–µ–Ω–∏–µ *</Label>
                  <Textarea
                    id="message"
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder="–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è..."
                    rows={6}
                  />
                </div>

                {selectedChannel && (
                  <div className="p-3 bg-muted rounded-lg">
                    <div className="text-sm">
                      <div className="font-medium mb-1">–ü—Ä–µ–¥–≤–∞—Ä–∏—Ç–µ–ª—å–Ω—ã–π –ø—Ä–æ—Å–º–æ—Ç—Ä:</div>
                      <div className="text-muted-foreground">
                        –ö–∞–Ω–∞–ª: {clientData.availableChannels.find(c => c.id === selectedChannel)?.name}
                      </div>
                      <div className="text-muted-foreground">
                        –¢–µ–º–∞: {subject || '–ù–µ —É–∫–∞–∑–∞–Ω–∞'}
                      </div>
                      <div className="text-muted-foreground">
                        –°–∏–º–≤–æ–ª–æ–≤: {message.length}
                      </div>
                    </div>
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </div>

        <DialogFooter>
          <Button variant="outline" onClick={() => onOpenChange(false)}>
            –û—Ç–º–µ–Ω–∞
          </Button>
          <Button onClick={handleSend} disabled={!selectedChannel || !subject || !message}>
            <Send className="h-4 w-4 mr-2" />
            –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ
          </Button>
        </DialogFooter>
      </DialogContent>
    </Dialog>
  );
};

export default InitiateConversationModal;
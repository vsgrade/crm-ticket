import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle, DialogTrigger } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Textarea } from "@/components/ui/textarea";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Badge } from "@/components/ui/badge";
import { useToast } from "@/hooks/use-toast";
import { Plus, Save, Users, Building2, MapPin, Star, Mail, Phone } from "lucide-react";

interface CreateClientModalProps {
  trigger?: React.ReactNode;
}

export const CreateClientModal = ({ trigger }: CreateClientModalProps) => {
  const [open, setOpen] = useState(false);
  const [formData, setFormData] = useState({
    name: "",
    email: "",
    phone: "",
    company: "",
    location: "",
    segment: "",
    notes: "",
    telegramId: "",
    whatsappId: "",
    vkId: ""
  });
  const { toast } = useToast();

  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    
    // –°–∏–º—É–ª—è—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∏–µ–Ω—Ç–∞
    const clientId = `CLI-${String(Math.floor(Math.random() * 10000)).padStart(4, '0')}`;
    
    toast({
      title: "–ö–ª–∏–µ–Ω—Ç –¥–æ–±–∞–≤–ª–µ–Ω! üë•",
      description: `–ö–ª–∏–µ–Ω—Ç ${formData.name} —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω —Å ID ${clientId} (–¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è)`,
    });
    
    setOpen(false);
    setFormData({
      name: "",
      email: "",
      phone: "",
      company: "",
      location: "",
      segment: "",
      notes: "",
      telegramId: "",
      whatsappId: "",
      vkId: ""
    });
  };

  return (
    <Dialog open={open} onOpenChange={setOpen}>
      <DialogTrigger asChild>
        {trigger || (
          <Button className="btn-gradient">
            <Plus className="h-4 w-4 mr-2" />
            –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
          </Button>
        )}
      </DialogTrigger>
      <DialogContent className="max-w-2xl max-h-[90vh] overflow-y-auto">
        <DialogHeader>
          <DialogTitle className="flex items-center gap-2">
            <Users className="h-5 w-5 text-primary" />
            –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∫–ª–∏–µ–Ω—Ç–∞
            <Badge variant="secondary" className="ml-auto">–î–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è</Badge>
          </DialogTitle>
        </DialogHeader>
        
        <form onSubmit={handleSubmit} className="space-y-6">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4">
            <h4 className="font-medium text-sm text-muted-foreground uppercase tracking-wider">–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="name">–ò–º—è –∫–ª–∏–µ–Ω—Ç–∞ *</Label>
                <Input
                  id="name"
                  value={formData.name}
                  onChange={(e) => setFormData(prev => ({...prev, name: e.target.value}))}
                  placeholder="–ò–º—è –§–∞–º–∏–ª–∏—è"
                  required
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="segment">–°–µ–≥–º–µ–Ω—Ç</Label>
                <Select value={formData.segment} onValueChange={(value) => setFormData(prev => ({...prev, segment: value}))}>
                  <SelectTrigger>
                    <SelectValue placeholder="–¢–∏–ø –∫–ª–∏–µ–Ω—Ç–∞" />
                  </SelectTrigger>
                  <SelectContent>
                    <SelectItem value="enterprise">üè¢ Enterprise</SelectItem>
                    <SelectItem value="smb">üè™ SMB (–ú–∞–ª—ã–π –±–∏–∑–Ω–µ—Å)</SelectItem>
                    <SelectItem value="individual">üë§ –ß–∞—Å—Ç–Ω–æ–µ –ª–∏—Ü–æ</SelectItem>
                    <SelectItem value="vip">‚≠ê VIP –∫–ª–∏–µ–Ω—Ç</SelectItem>
                  </SelectContent>
                </Select>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="email">Email</Label>
                <div className="relative">
                  <Mail className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="email"
                    type="email"
                    value={formData.email}
                    onChange={(e) => setFormData(prev => ({...prev, email: e.target.value}))}
                    placeholder="email@example.com"
                    className="pl-10"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="phone">–¢–µ–ª–µ—Ñ–æ–Ω</Label>
                <div className="relative">
                  <Phone className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="phone"
                    value={formData.phone}
                    onChange={(e) => setFormData(prev => ({...prev, phone: e.target.value}))}
                    placeholder="+7 999 123-45-67"
                    className="pl-10"
                  />
                </div>
              </div>
            </div>

            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              <div className="space-y-2">
                <Label htmlFor="company">–ö–æ–º–ø–∞–Ω–∏—è</Label>
                <div className="relative">
                  <Building2 className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="company"
                    value={formData.company}
                    onChange={(e) => setFormData(prev => ({...prev, company: e.target.value}))}
                    placeholder="–û–û–û –ù–∞–∑–≤–∞–Ω–∏–µ"
                    className="pl-10"
                  />
                </div>
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="location">–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ</Label>
                <div className="relative">
                  <MapPin className="absolute left-3 top-3 h-4 w-4 text-muted-foreground" />
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => setFormData(prev => ({...prev, location: e.target.value}))}
                    placeholder="–ú–æ—Å–∫–≤–∞, –†–æ—Å—Å–∏—è"
                    className="pl-10"
                  />
                </div>
              </div>
            </div>
          </div>

          {/* –ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã */}
          <div className="space-y-4">
            <h4 className="font-medium text-sm text-muted-foreground uppercase tracking-wider">–ö–æ–Ω—Ç–∞–∫—Ç—ã –≤ –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞—Ö</h4>
            
            <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
              <div className="space-y-2">
                <Label htmlFor="telegramId">Telegram</Label>
                <Input
                  id="telegramId"
                  value={formData.telegramId}
                  onChange={(e) => setFormData(prev => ({...prev, telegramId: e.target.value}))}
                  placeholder="@username"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="whatsappId">WhatsApp</Label>
                <Input
                  id="whatsappId"
                  value={formData.whatsappId}
                  onChange={(e) => setFormData(prev => ({...prev, whatsappId: e.target.value}))}
                  placeholder="+7 999 123-45-67"
                />
              </div>
              
              <div className="space-y-2">
                <Label htmlFor="vkId">–í–ö–æ–Ω—Ç–∞–∫—Ç–µ</Label>
                <Input
                  id="vkId"
                  value={formData.vkId}
                  onChange={(e) => setFormData(prev => ({...prev, vkId: e.target.value}))}
                  placeholder="vk.com/username"
                />
              </div>
            </div>
          </div>

          {/* –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4">
            <h4 className="font-medium text-sm text-muted-foreground uppercase tracking-wider">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h4>
            
            <div className="space-y-2">
              <Label htmlFor="notes">–ó–∞–º–µ—Ç–∫–∏</Label>
              <Textarea
                id="notes"
                value={formData.notes}
                onChange={(e) => setFormData(prev => ({...prev, notes: e.target.value}))}
                placeholder="–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–ª–∏–µ–Ω—Ç–µ..."
                rows={3}
              />
            </div>
          </div>

          <div className="flex gap-2 pt-4">
            <Button type="button" variant="outline" onClick={() => setOpen(false)} className="flex-1">
              –û—Ç–º–µ–Ω–∞
            </Button>
            <Button type="submit" className="btn-gradient flex-1">
              <Save className="h-4 w-4 mr-2" />
              –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
            </Button>
          </div>
        </form>
      </DialogContent>
    </Dialog>
  );
};

export default CreateClientModal;
import { useState } from "react";
import { Dialog, DialogContent, DialogHeader, DialogTitle } from "@/components/ui/dialog";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { useToast } from "@/hooks/use-toast";
import { 
  Send, 
  MessageSquare, 
  User, 
  Clock, 
  Paperclip, 
  Eye,
  FileText,
  Users,
  Tag,
  Flag,
  Settings
} from "lucide-react";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";

interface TicketDetailModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  ticketId?: string;
}

interface Message {
  id: string;
  content: string;
  author: 'client' | 'agent';
  authorName: string;
  timestamp: Date;
  isInternal?: boolean;
}

export const TicketDetailModal = ({ open, onOpenChange, ticketId = "TIC-2024-001" }: TicketDetailModalProps) => {
  const [message, setMessage] = useState("");
  const [isInternal, setIsInternal] = useState(false);
  const { toast } = useToast();

  // –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ –¥–ª—è —Ç–∏–∫–µ—Ç–∞
  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –û—à–∏–±–∫–∞ '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', —Ö–æ—Ç—è –ø–∞—Ä–æ–ª—å —Ç–æ—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.",
      author: "client",
      authorName: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:30:00"),
    },
    {
      id: "2",
      content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–Ω–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.",
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:35:00"),
    },
    {
      id: "3",
      content: "–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å. –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ.",
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:36:00"),
      isInternal: true,
    },
    {
      id: "4",
      content: "–ê–Ω–Ω–∞, —è —Å–±—Ä–æ—Å–∏–ª –≤–∞—à –ø–∞—Ä–æ–ª—å. –ù–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞.",
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:40:00"),
    }
  ]);

  const ticketData = {
    id: ticketId,
    subject: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ",
    status: "in-progress",
    priority: "high",
    source: "telegram",
    client: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    assignedTo: ["–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞"],
    department: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    createdAt: new Date("2024-01-15T14:30:00"),
    slaStatus: "warning",
    tags: ["–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–ø–∞—Ä–æ–ª—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"]
  };

  const handleSendMessage = () => {
    if (!message.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      content: message,
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date(),
      isInternal: isInternal
    };

    setMessages(prev => [...prev, newMessage]);
    setMessage("");

    toast({
      title: isInternal ? "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üìù" : "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì§",
      description: isInternal ? "–ó–∞–º–µ—Ç–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º" : "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É (–¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è)",
    });
  };

  const getStatusBadge = (status: string) => {
    const statusMap = {
      'new': { label: '–ù–æ–≤—ã–π', class: 'status-new' },
      'in-progress': { label: '–í —Ä–∞–±–æ—Ç–µ', class: 'status-in-progress' },
      'resolved': { label: '–†–µ—à–µ–Ω', class: 'status-resolved' },
      'closed': { label: '–ó–∞–∫—Ä—ã—Ç', class: 'status-closed' }
    };
    const statusInfo = statusMap[status as keyof typeof statusMap];
    return (
      <Badge className={`status-badge ${statusInfo.class}`}>
        {statusInfo.label}
      </Badge>
    );
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'text-destructive';
      case 'high': return 'text-destructive';
      case 'medium': return 'text-warning';
      case 'low': return 'text-muted-foreground';
      default: return 'text-muted-foreground';
    }
  };

  const getSourceIcon = (source: string) => {
    const sourceMap = {
      'telegram': 'üì±',
      'whatsapp': 'üí¨',
      'whatsapp-business': 'üíº',
      'vk': 'üîµ',
      'sms': 'üì®',
      'email': 'üìß'
    };
    return sourceMap[source as keyof typeof sourceMap] || 'üí¨';
  };

  return (
    <Dialog open={open} onOpenChange={onOpenChange}>
      <DialogContent className="max-w-4xl max-h-[90vh] p-0 overflow-hidden">
        <div className="flex h-[80vh]">
          {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ */}
          <div className="w-80 border-r border-border bg-card/30 p-6 space-y-6">
            <DialogHeader>
              <DialogTitle className="flex items-center gap-2 text-lg">
                <MessageSquare className="h-5 w-5 text-primary" />
                {ticketData.id}
              </DialogTitle>
            </DialogHeader>

            <div className="space-y-4">
              {/* –°—Ç–∞—Ç—É—Å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç */}
              <div className="flex flex-col gap-2">
                {getStatusBadge(ticketData.status)}
                <div className="flex items-center gap-2">
                  <Flag className={`h-4 w-4 ${getPriorityColor(ticketData.priority)}`} />
                  <span className="text-sm font-medium">–í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç</span>
                </div>
              </div>

              {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
              <div className="space-y-3">
                <div>
                  <div className="text-xs text-muted-foreground uppercase tracking-wider mb-1">–¢–µ–º–∞</div>
                  <div className="text-sm font-medium">{ticketData.subject}</div>
                </div>

                <div>
                  <div className="text-xs text-muted-foreground uppercase tracking-wider mb-1">–ö–ª–∏–µ–Ω—Ç</div>
                  <div className="flex items-center gap-2">
                    <User className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{ticketData.client}</span>
                  </div>
                </div>

                <div>
                  <div className="text-xs text-muted-foreground uppercase tracking-wider mb-1">–ò—Å—Ç–æ—á–Ω–∏–∫</div>
                  <div className="flex items-center gap-2">
                    <span className="text-lg">{getSourceIcon(ticketData.source)}</span>
                    <span className="text-sm capitalize">{ticketData.source}</span>
                  </div>
                </div>

                <div>
                  <div className="text-xs text-muted-foreground uppercase tracking-wider mb-1">–ù–∞–∑–Ω–∞—á–µ–Ω</div>
                  <div className="flex items-center gap-2">
                    <Users className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{ticketData.assignedTo.join(', ')}</span>
                  </div>
                </div>

                <div>
                  <div className="text-xs text-muted-foreground uppercase tracking-wider mb-1">–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç</div>
                  <div className="text-sm">{ticketData.department}</div>
                </div>

                <div>
                  <div className="text-xs text-muted-foreground uppercase tracking-wider mb-1">–°–æ–∑–¥–∞–Ω</div>
                  <div className="flex items-center gap-2">
                    <Clock className="h-4 w-4 text-muted-foreground" />
                    <span className="text-sm">{ticketData.createdAt.toLocaleString('ru-RU')}</span>
                  </div>
                </div>
              </div>

              {/* –¢–µ–≥–∏ */}
              <div>
                <div className="text-xs text-muted-foreground uppercase tracking-wider mb-2">–¢–µ–≥–∏</div>
                <div className="flex flex-wrap gap-1">
                  {ticketData.tags.map(tag => (
                    <Badge key={tag} variant="outline" className="text-xs">
                      <Tag className="h-3 w-3 mr-1" />
                      {tag}
                    </Badge>
                  ))}
                </div>
              </div>

              {/* –î–µ–π—Å—Ç–≤–∏—è */}
              <div className="space-y-2">
                <Button variant="outline" size="sm" className="w-full justify-start">
                  <Settings className="h-4 w-4 mr-2" />
                  –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∏–∫–µ—Ç
                </Button>
                <Button variant="outline" size="sm" className="w-full justify-start">
                  <FileText className="h-4 w-4 mr-2" />
                  –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
                </Button>
              </div>
            </div>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–µ—Ä–µ–ø–∏—Å–∫–∞ */}
          <div className="flex-1 flex flex-col">
            {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ */}
            <div className="p-4 border-b border-border bg-card/30">
              <div className="flex items-center justify-between">
                <h3 className="font-semibold">–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ —Ç–∏–∫–µ—Ç—É</h3>
                <Badge variant="secondary">–î–µ–º–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∞</Badge>
              </div>
            </div>

            {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
            <ScrollArea className="flex-1 p-4">
              <div className="space-y-4">
                {messages.map((msg) => (
                  <div key={msg.id} className={`flex gap-3 ${msg.author === 'agent' ? 'justify-end' : 'justify-start'}`}>
                    {msg.author === 'client' && (
                      <Avatar className="h-8 w-8">
                        <AvatarFallback className="bg-primary/20 text-primary">
                          {msg.authorName.split(' ').map(n => n[0]).join('')}
                        </AvatarFallback>
                      </Avatar>
                    )}
                    
                    <div className={`max-w-[70%] space-y-1`}>
                      <div className="flex items-center gap-2 text-xs text-muted-foreground">
                        <span>{msg.authorName}</span>
                        <span>{msg.timestamp.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</span>
                        {msg.isInternal && (
                          <Badge variant="secondary" className="text-xs h-4">
                            –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è
                          </Badge>
                        )}
                      </div>
                      <div 
                        className={`p-3 rounded-lg text-sm ${
                          msg.isInternal 
                            ? 'bg-warning/20 border border-warning/30 text-warning-foreground' 
                            : msg.author === 'client' 
                            ? 'bg-accent text-accent-foreground' 
                            : 'bg-primary text-primary-foreground'
                        }`}
                      >
                        {msg.content}
                      </div>
                    </div>

                    {msg.author === 'agent' && !msg.isInternal && (
                      <Avatar className="h-8 w-8">
                        <AvatarFallback className="bg-success/20 text-success">
                          {msg.authorName.split(' ').map(n => n[0]).join('')}
                        </AvatarFallback>
                      </Avatar>
                    )}
                  </div>
                ))}
              </div>
            </ScrollArea>

            {/* –§–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ */}
            <div className="p-4 border-t border-border bg-card/30">
              <div className="space-y-3">
                {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ */}
                <div className="flex gap-2">
                  <Button
                    type="button"
                    variant={!isInternal ? "default" : "outline"}
                    size="sm"
                    onClick={() => setIsInternal(false)}
                  >
                    <User className="h-4 w-4 mr-2" />
                    –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
                  </Button>
                  <Button
                    type="button"
                    variant={isInternal ? "default" : "outline"}
                    size="sm"
                    onClick={() => setIsInternal(true)}
                  >
                    <Eye className="h-4 w-4 mr-2" />
                    –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞
                  </Button>
                </div>

                {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
                <div className="flex gap-2">
                  <Textarea
                    value={message}
                    onChange={(e) => setMessage(e.target.value)}
                    placeholder={isInternal ? "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º)..." : "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É..."}
                    className={`flex-1 min-h-[60px] resize-none ${
                      isInternal ? 'border-warning/50 focus:border-warning' : ''
                    }`}
                    onKeyDown={(e) => {
                      if (e.key === 'Enter' && !e.shiftKey) {
                        e.preventDefault();
                        handleSendMessage();
                      }
                    }}
                  />
                  <div className="flex flex-col gap-2">
                    <Button variant="outline" size="icon">
                      <Paperclip className="h-4 w-4" />
                    </Button>
                    <Button 
                      onClick={handleSendMessage}
                      disabled={!message.trim()}
                      className={isInternal ? "bg-warning hover:bg-warning/90" : "btn-gradient"}
                    >
                      <Send className="h-4 w-4" />
                    </Button>
                  </div>
                </div>
              </div>
            </div>
          </div>
        </div>
      </DialogContent>
    </Dialog>
  );
};

export default TicketDetailModal;
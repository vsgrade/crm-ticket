import { useState } from "react";
import { X, Save, MessageSquare, User, Clock, Paperclip, Eye, Send, Flag, Tag, Settings, FileText, Users } from "lucide-react";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Textarea } from "@/components/ui/textarea";
import { Badge } from "@/components/ui/badge";
import { Avatar, AvatarFallback } from "@/components/ui/avatar";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { useToast } from "@/hooks/use-toast";
import { Separator } from "@/components/ui/separator";
import { ScrollArea } from "@/components/ui/scroll-area";

interface FullPageTicketModalProps {
  open: boolean;
  onOpenChange: (open: boolean) => void;
  ticketId?: string;
}

interface Message {
  id: string;
  content: string;
  author: 'client' | 'agent';
  authorName: string;
  timestamp: Date;
  isInternal?: boolean;
}

export const FullPageTicketModal = ({ open, onOpenChange, ticketId = "TIC-2024-001" }: FullPageTicketModalProps) => {
  const [message, setMessage] = useState("");
  const [isInternal, setIsInternal] = useState(false);
  const [isEditing, setIsEditing] = useState(false);
  const { toast } = useToast();

  // –î–∞–Ω–Ω—ã–µ —Ç–∏–∫–µ—Ç–∞ (—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã–µ)
  const [ticketData, setTicketData] = useState({
    id: ticketId,
    subject: "–ü—Ä–æ–±–ª–µ–º–∞ —Å –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–µ–π –≤ —Å–∏—Å—Ç–µ–º–µ",
    status: "in-progress",
    priority: "high",
    source: "telegram",
    client: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
    assignedTo: ["–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞"],
    department: "–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞",
    createdAt: new Date("2024-01-15T14:30:00"),
    slaStatus: "warning",
    tags: ["–∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è", "–ø–∞—Ä–æ–ª—å", "–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å"]
  });

  const [messages, setMessages] = useState<Message[]>([
    {
      id: "1",
      content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ! –ù–µ –º–æ–≥—É –≤–æ–π—Ç–∏ –≤ –ª–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç. –û—à–∏–±–∫–∞ '–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å', —Ö–æ—Ç—è –ø–∞—Ä–æ–ª—å —Ç–æ—á–Ω–æ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π.",
      author: "client",
      authorName: "–ê–Ω–Ω–∞ –ü–µ—Ç—Ä–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:30:00"),
    },
    {
      id: "2",
      content: "–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, –ê–Ω–Ω–∞! –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—â–µ–Ω–∏–µ. –ü—Ä–æ–≤–µ—Ä—è—é –≤–∞—à—É —É—á–µ—Ç–Ω—É—é –∑–∞–ø–∏—Å—å.",
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:35:00"),
    },
    {
      id: "3",
      content: "–ö–ª–∏–µ–Ω—Ç –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å—Ç–∞—Ä—ã–π –ø–∞—Ä–æ–ª—å. –ù—É–∂–Ω–æ –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ —Å–∏—Å—Ç–µ–º–µ.",
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:36:00"),
      isInternal: true,
    },
    {
      id: "4",
      content: "–ê–Ω–Ω–∞, —è —Å–±—Ä–æ—Å–∏–ª –≤–∞—à –ø–∞—Ä–æ–ª—å. –ù–æ–≤—ã–π –≤—Ä–µ–º–µ–Ω–Ω—ã–π –ø–∞—Ä–æ–ª—å –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –≤–∞—à—É –ø–æ—á—Ç—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–º–µ–Ω–∏—Ç–µ –µ–≥–æ –ø–æ—Å–ª–µ –≤—Ö–æ–¥–∞.",
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date("2024-01-15T14:40:00"),
    }
  ]);

  const handleSendMessage = () => {
    if (!message.trim()) return;

    const newMessage: Message = {
      id: Date.now().toString(),
      content: message,
      author: "agent",
      authorName: "–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞",
      timestamp: new Date(),
      isInternal: isInternal
    };

    setMessages(prev => [...prev, newMessage]);
    setMessage("");

    toast({
      title: isInternal ? "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ üìù" : "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ üì§",
      description: isInternal ? "–ó–∞–º–µ—Ç–∫–∞ –≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º" : "–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É (–¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è)",
    });
  };

  const handleSave = () => {
    toast({
      title: "–¢–∏–∫–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω ‚úÖ",
      description: "–ò–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã (–¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è)",
    });
  };

  const getStatusBadge = (status: string) => {
    const statusMap = {
      'new': { label: '–ù–æ–≤—ã–π', class: 'bg-blue-500/20 text-blue-700' },
      'in-progress': { label: '–í —Ä–∞–±–æ—Ç–µ', class: 'bg-yellow-500/20 text-yellow-700' },
      'resolved': { label: '–†–µ—à–µ–Ω', class: 'bg-green-500/20 text-green-700' },
      'closed': { label: '–ó–∞–∫—Ä—ã—Ç', class: 'bg-gray-500/20 text-gray-700' }
    };
    const statusInfo = statusMap[status as keyof typeof statusMap];
    return (
      <Badge className={statusInfo.class}>
        {statusInfo.label}
      </Badge>
    );
  };

  const getPriorityColor = (priority: string) => {
    switch (priority) {
      case 'critical': return 'text-red-600';
      case 'high': return 'text-orange-600';
      case 'medium': return 'text-yellow-600';
      case 'low': return 'text-green-600';
      default: return 'text-gray-600';
    }
  };

  if (!open) return null;

  return (
    <div className="fixed inset-0 z-50 bg-background">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="h-16 border-b border-border bg-card/50 backdrop-blur-sm flex items-center justify-between px-6">
        <div className="flex items-center gap-4">
          <div className="flex items-center gap-2">
            <MessageSquare className="h-6 w-6 text-primary" />
            <span className="text-xl font-semibold">{ticketData.id}</span>
            {getStatusBadge(ticketData.status)}
          </div>
          
          <Separator orientation="vertical" className="h-6" />
          
          <Input
            value={ticketData.subject}
            onChange={(e) => setTicketData(prev => ({ ...prev, subject: e.target.value }))}
            className="text-lg font-medium border-none shadow-none p-0 h-auto bg-transparent focus-visible:ring-0"
            placeholder="–¢–µ–º–∞ —Ç–∏–∫–µ—Ç–∞..."
          />
        </div>

        <div className="flex items-center gap-2">
          <Button onClick={handleSave} className="gap-2">
            <Save className="h-4 w-4" />
            –°–æ—Ö—Ä–∞–Ω–∏—Ç—å
          </Button>
          <Button variant="outline" onClick={() => onOpenChange(false)} className="gap-2">
            <X className="h-4 w-4" />
            –ó–∞–∫—Ä—ã—Ç—å
          </Button>
        </div>
      </div>

      <div className="flex h-[calc(100vh-64px)]">
        {/* –õ–µ–≤–∞—è –ø–∞–Ω–µ–ª—å - –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Ç–∏–∫–µ—Ç–µ */}
        <div className="w-80 border-r border-border bg-card/30 p-6 space-y-6 overflow-y-auto">
          {/* –û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è */}
          <div className="space-y-4">
            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–°—Ç–∞—Ç—É—Å</label>
              <Select value={ticketData.status} onValueChange={(value) => setTicketData(prev => ({ ...prev, status: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="new">–ù–æ–≤—ã–π</SelectItem>
                  <SelectItem value="in-progress">–í —Ä–∞–±–æ—Ç–µ</SelectItem>
                  <SelectItem value="resolved">–†–µ—à–µ–Ω</SelectItem>
                  <SelectItem value="closed">–ó–∞–∫—Ä—ã—Ç</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç</label>
              <Select value={ticketData.priority} onValueChange={(value) => setTicketData(prev => ({ ...prev, priority: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="low">–ù–∏–∑–∫–∏–π</SelectItem>
                  <SelectItem value="medium">–°—Ä–µ–¥–Ω–∏–π</SelectItem>
                  <SelectItem value="high">–í—ã—Å–æ–∫–∏–π</SelectItem>
                  <SelectItem value="critical">–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–ö–ª–∏–µ–Ω—Ç</label>
              <div className="flex items-center gap-2">
                <User className="h-4 w-4 text-muted-foreground" />
                <Input
                  value={ticketData.client}
                  onChange={(e) => setTicketData(prev => ({ ...prev, client: e.target.value }))}
                  className="border-none shadow-none p-0 h-auto bg-transparent focus-visible:ring-0"
                />
              </div>
            </div>

            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–ò—Å—Ç–æ—á–Ω–∏–∫</label>
              <Select value={ticketData.source} onValueChange={(value) => setTicketData(prev => ({ ...prev, source: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="telegram">üì± Telegram</SelectItem>
                  <SelectItem value="whatsapp">üí¨ WhatsApp</SelectItem>
                  <SelectItem value="email">üìß Email</SelectItem>
                  <SelectItem value="sms">üì® SMS</SelectItem>
                  <SelectItem value="vk">üîµ VK</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–ù–∞–∑–Ω–∞—á–µ–Ω</label>
              <Select value={ticketData.assignedTo[0]} onValueChange={(value) => setTicketData(prev => ({ ...prev, assignedTo: [value] }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞">–ú–∞—Ä–∏—è –ò–≤–∞–Ω–æ–≤–∞</SelectItem>
                  <SelectItem value="–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤">–ü–µ—Ç—Ä –°–∏–¥–æ—Ä–æ–≤</SelectItem>
                  <SelectItem value="–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞">–ê–Ω–Ω–∞ –ö–æ–∑–ª–æ–≤–∞</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–î–µ–ø–∞—Ä—Ç–∞–º–µ–Ω—Ç</label>
              <Select value={ticketData.department} onValueChange={(value) => setTicketData(prev => ({ ...prev, department: value }))}>
                <SelectTrigger>
                  <SelectValue />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞">–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞</SelectItem>
                  <SelectItem value="–ü—Ä–æ–¥–∞–∂–∏">–ü—Ä–æ–¥–∞–∂–∏</SelectItem>
                  <SelectItem value="–§–∏–Ω–∞–Ω—Å—ã">–§–∏–Ω–∞–Ω—Å—ã</SelectItem>
                </SelectContent>
              </Select>
            </div>

            <div>
              <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–°–æ–∑–¥–∞–Ω</label>
              <div className="flex items-center gap-2">
                <Clock className="h-4 w-4 text-muted-foreground" />
                <span className="text-sm">{ticketData.createdAt.toLocaleString('ru-RU')}</span>
              </div>
            </div>
          </div>

          {/* –¢–µ–≥–∏ */}
          <div>
            <label className="text-xs text-muted-foreground uppercase tracking-wider mb-2 block">–¢–µ–≥–∏</label>
            <div className="flex flex-wrap gap-1">
              {ticketData.tags.map((tag, index) => (
                <Badge key={index} variant="outline" className="text-xs">
                  <Tag className="h-3 w-3 mr-1" />
                  {tag}
                </Badge>
              ))}
            </div>
          </div>

          {/* –î–µ–π—Å—Ç–≤–∏—è */}
          <div className="space-y-2">
            <Button variant="outline" size="sm" className="w-full justify-start">
              <FileText className="h-4 w-4 mr-2" />
              –ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π
            </Button>
          </div>
        </div>

        {/* –ü—Ä–∞–≤–∞—è –ø–∞–Ω–µ–ª—å - –ø–µ—Ä–µ–ø–∏—Å–∫–∞ */}
        <div className="flex-1 flex flex-col">
          {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–ø–∏—Å–∫–∏ */}
          <div className="p-4 border-b border-border bg-card/30">
            <div className="flex items-center justify-between">
              <h3 className="font-semibold">–ü–µ—Ä–µ–ø–∏—Å–∫–∞ –ø–æ —Ç–∏–∫–µ—Ç—É</h3>
              <Badge variant="secondary">–î–µ–º–æ –ø–µ—Ä–µ–ø–∏—Å–∫–∞</Badge>
            </div>
          </div>

          {/* –°–æ–æ–±—â–µ–Ω–∏—è */}
          <ScrollArea className="flex-1 p-4">
            <div className="space-y-4">
              {messages.map((msg) => (
                <div key={msg.id} className={`flex gap-3 ${msg.author === 'agent' ? 'justify-end' : 'justify-start'}`}>
                  {msg.author === 'client' && (
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="bg-primary/20 text-primary">
                        {msg.authorName.split(' ').map(n => n[0]).join('')}
                      </AvatarFallback>
                    </Avatar>
                  )}
                  
                  <div className={`max-w-[70%] space-y-1`}>
                    <div className="flex items-center gap-2 text-xs text-muted-foreground">
                      <span>{msg.authorName}</span>
                      <span>{msg.timestamp.toLocaleTimeString('ru-RU', { hour: '2-digit', minute: '2-digit' })}</span>
                      {msg.isInternal && (
                        <Badge variant="secondary" className="text-xs h-4">
                          –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è
                        </Badge>
                      )}
                    </div>
                    <div 
                      className={`p-3 rounded-lg text-sm ${
                        msg.isInternal 
                          ? 'bg-warning/20 border border-warning/30 text-warning-foreground' 
                          : msg.author === 'client' 
                          ? 'bg-accent text-accent-foreground' 
                          : 'bg-primary text-primary-foreground'
                      }`}
                    >
                      {msg.content}
                    </div>
                  </div>

                  {msg.author === 'agent' && !msg.isInternal && (
                    <Avatar className="h-8 w-8">
                      <AvatarFallback className="bg-success/20 text-success">
                        {msg.authorName.split(' ').map(n => n[0]).join('')}
                      </AvatarFallback>
                    </Avatar>
                  )}
                </div>
              ))}
            </div>
          </ScrollArea>

          {/* –§–æ—Ä–º–∞ –æ—Ç–≤–µ—Ç–∞ */}
          <div className="p-4 border-t border-border bg-card/30">
            <div className="space-y-3">
              {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å —Ä–µ–∂–∏–º–∞ */}
              <div className="flex gap-2">
                <Button
                  type="button"
                  variant={!isInternal ? "default" : "outline"}
                  size="sm"
                  onClick={() => setIsInternal(false)}
                >
                  <User className="h-4 w-4 mr-2" />
                  –û—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É
                </Button>
                <Button
                  type="button"
                  variant={isInternal ? "default" : "outline"}
                  size="sm"
                  onClick={() => setIsInternal(true)}
                >
                  <Eye className="h-4 w-4 mr-2" />
                  –í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞
                </Button>
              </div>

              {/* –ü–æ–ª–µ –≤–≤–æ–¥–∞ */}
              <div className="flex gap-2">
                <Textarea
                  value={message}
                  onChange={(e) => setMessage(e.target.value)}
                  placeholder={isInternal ? "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞–º–µ—Ç–∫–∞ (–≤–∏–¥–Ω–∞ —Ç–æ–ª—å–∫–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞–º)..." : "–í–≤–µ–¥–∏—Ç–µ –æ—Ç–≤–µ—Ç –∫–ª–∏–µ–Ω—Ç—É..."}
                  className={`flex-1 min-h-[60px] resize-none ${
                    isInternal ? 'border-warning/50 focus:border-warning' : ''
                  }`}
                  onKeyDown={(e) => {
                    if (e.key === 'Enter' && !e.shiftKey) {
                      e.preventDefault();
                      handleSendMessage();
                    }
                  }}
                />
                <div className="flex flex-col gap-2">
                  <Button variant="outline" size="icon">
                    <Paperclip className="h-4 w-4" />
                  </Button>
                  <Button 
                    onClick={handleSendMessage}
                    disabled={!message.trim()}
                    className={isInternal ? "bg-warning hover:bg-warning/90" : ""}
                  >
                    <Send className="h-4 w-4" />
                  </Button>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default FullPageTicketModal;
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Button } from "@/components/ui/button";
import { 
  Ticket, 
  Users, 
  Clock, 
  TrendingUp, 
  AlertTriangle,
  CheckCircle,
  MessageSquare,
  BarChart3,
  Calendar,
  Target,
  Zap,
  Globe
} from "lucide-react";
import { mockStats } from "@/data/mockData";

const Dashboard = () => {
  const quickStats = [
    {
      title: "–í—Å–µ–≥–æ —Ç–∏–∫–µ—Ç–æ–≤",
      value: mockStats.totalTickets,
      change: "+12%",
      icon: Ticket,
      color: "text-primary"
    },
    {
      title: "–ù–æ–≤—ã–µ —Ç–∏–∫–µ—Ç—ã", 
      value: mockStats.newTickets,
      change: "+5",
      icon: AlertTriangle,
      color: "text-warning"
    },
    {
      title: "–í —Ä–∞–±–æ—Ç–µ",
      value: mockStats.inProgressTickets,
      change: "-3",
      icon: Clock,
      color: "text-status-in-progress"
    },
    {
      title: "–†–µ—à–µ–Ω–æ —Å–µ–≥–æ–¥–Ω—è",
      value: mockStats.resolvedToday,
      change: "+8",
      icon: CheckCircle,
      color: "text-success"
    }
  ];

  const performanceMetrics = [
    {
      title: "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –æ—Ç–≤–µ—Ç–∞",
      value: mockStats.avgResponseTime,
      target: "< 2—á",
      status: "good",
      icon: Clock
    },
    {
      title: "–°–æ–±–ª—é–¥–µ–Ω–∏–µ SLA",
      value: `${mockStats.slaCompliance}%`,
      target: "> 90%",
      status: "good", 
      icon: Target
    },
    {
      title: "–ê–∫—Ç–∏–≤–Ω—ã–µ –∞–≥–µ–Ω—Ç—ã",
      value: mockStats.activeAgents,
      target: "15",
      status: "warning",
      icon: Users
    },
    {
      title: "–í—Å–µ–≥–æ –∫–ª–∏–µ–Ω—Ç–æ–≤",
      value: mockStats.totalClients.toLocaleString(),
      target: "1500",
      status: "good",
      icon: Users
    }
  ];

  const recentActivity = [
    "üîÑ –¢–∏–∫–µ—Ç TIC-2024-001 –ø–µ—Ä–µ–≤–µ–¥–µ–Ω –≤ —Å—Ç–∞—Ç—É—Å '–í —Ä–∞–±–æ—Ç–µ'",
    "‚úÖ –¢–∏–∫–µ—Ç TIC-2024-045 —É—Å–ø–µ—à–Ω–æ —Ä–µ—à–µ–Ω",
    "üìß –ù–æ–≤–æ–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ email –æ—Ç client@company.com",
    "ü§ñ –ò–ò –ø—Ä–µ–¥–ª–æ–∂–∏–ª –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç –¥–ª—è —Ç–∏–∫–µ—Ç–∞ TIC-2024-067",
    "‚ö†Ô∏è SLA –Ω–∞—Ä—É—à–µ–Ω –¥–ª—è —Ç–∏–∫–µ—Ç–∞ TIC-2024-023"
  ];

  return (
    <div className="p-6 space-y-6 h-full overflow-y-auto">
      {/* –ó–∞–≥–æ–ª–æ–≤–æ–∫ */}
      <div className="flex justify-between items-center">
        <div>
          <h1 className="text-3xl font-bold">–î–∞—à–±–æ—Ä–¥</h1>
          <p className="text-muted-foreground">
            –û–±–∑–æ—Ä —Å–∏—Å—Ç–µ–º—ã —Ç–∏–∫–µ—Ç–æ–≤ ‚Ä¢ –î–µ–º–æ –¥–∞–Ω–Ω—ã–µ
          </p>
        </div>
        <div className="flex gap-2">
          <Button variant="outline" size="sm">
            <Calendar className="h-4 w-4 mr-2" />
            –°–µ–≥–æ–¥–Ω—è
          </Button>
          <Button className="btn-gradient" size="sm">
            <BarChart3 className="h-4 w-4 mr-2" />
            –û—Ç—á–µ—Ç—ã
          </Button>
        </div>
      </div>

      {/* –ë—ã—Å—Ç—Ä–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-4">
        {quickStats.map((stat, index) => (
          <Card key={index} className="bg-gradient-to-br from-card to-card/50 border-border/50 hover:shadow-lg transition-all duration-300">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-muted-foreground">{stat.title}</p>
                  <p className="text-2xl font-bold">{stat.value}</p>
                  <Badge variant="outline" className="mt-2 text-xs">
                    {stat.change}
                  </Badge>
                </div>
                <div className={`p-3 rounded-lg bg-accent/50 ${stat.color}`}>
                  <stat.icon className="h-6 w-6" />
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏ */}
        <Card className="lg:col-span-2 bg-gradient-to-br from-card to-card/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <TrendingUp className="h-5 w-5 text-primary" />
              –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
              <Badge variant="secondary" className="ml-auto">–î–µ–º–æ –¥–∞–Ω–Ω—ã–µ</Badge>
            </CardTitle>
          </CardHeader>
          <CardContent>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
              {performanceMetrics.map((metric, index) => (
                <div key={index} className="p-4 rounded-lg bg-accent/30 border border-border/50">
                  <div className="flex items-center justify-between mb-2">
                    <div className="flex items-center gap-2">
                      <metric.icon className="h-4 w-4 text-muted-foreground" />
                      <span className="text-sm text-muted-foreground">{metric.title}</span>
                    </div>
                    <Badge 
                      variant={metric.status === 'good' ? 'default' : 'secondary'}
                      className={metric.status === 'good' ? 'bg-success/20 text-success' : ''}
                    >
                      {metric.status === 'good' ? '‚úì' : '‚ö†'}
                    </Badge>
                  </div>
                  <div className="flex items-center justify-between">
                    <span className="text-xl font-bold">{metric.value}</span>
                    <span className="text-sm text-muted-foreground">—Ü–µ–ª—å: {metric.target}</span>
                  </div>
                </div>
              ))}
            </div>
          </CardContent>
        </Card>

        {/* –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è */}
        <Card className="bg-gradient-to-br from-card to-card/50">
          <CardHeader>
            <CardTitle className="flex items-center gap-2">
              <Zap className="h-5 w-5 text-primary" />
              –ë—ã—Å—Ç—Ä—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
            </CardTitle>
          </CardHeader>
          <CardContent className="space-y-3">
            <Button className="w-full justify-start" variant="outline">
              <Ticket className="h-4 w-4 mr-2" />
              –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç
            </Button>
            <Button className="w-full justify-start" variant="outline">
              <Users className="h-4 w-4 mr-2" />
              –î–æ–±–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞
            </Button>
            <Button className="w-full justify-start" variant="outline">
              <MessageSquare className="h-4 w-4 mr-2" />
              –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
            </Button>
            <Button className="w-full justify-start btn-gradient">
              <Globe className="h-4 w-4 mr-2" />
              API –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
            </Button>
          </CardContent>
        </Card>
      </div>

      {/* –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏ */}
      <Card className="bg-gradient-to-br from-card to-card/50">
        <CardHeader>
          <CardTitle className="flex items-center gap-2">
            <MessageSquare className="h-5 w-5 text-primary" />
            –ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏
            <Badge variant="secondary" className="ml-auto">–î–µ–º–æ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å</Badge>
          </CardTitle>
        </CardHeader>
        <CardContent>
          <div className="space-y-3">
            {recentActivity.map((activity, index) => (
              <div key={index} className="flex items-center gap-3 p-3 rounded-lg bg-accent/30 border border-border/50">
                <div className="w-2 h-2 rounded-full bg-primary animate-pulse"></div>
                <span className="text-sm">{activity}</span>
                <span className="text-xs text-muted-foreground ml-auto">
                  {index + 1} –º–∏–Ω –Ω–∞–∑–∞–¥
                </span>
              </div>
            ))}
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default Dashboard;
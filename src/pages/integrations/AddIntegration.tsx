import { useState } from "react";
import { Plus, Zap, Settings, Check, X, Globe, MessageSquare, Mail, Phone, Bot } from "lucide-react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Label } from "@/components/ui/label";
import { Badge } from "@/components/ui/badge";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Textarea } from "@/components/ui/textarea";
import { useToast } from "@/hooks/use-toast";

const AddIntegration = () => {
  const { toast } = useToast();
  const [selectedCategory, setSelectedCategory] = useState("");
  const [integrationName, setIntegrationName] = useState("");
  const [integrationDescription, setIntegrationDescription] = useState("");
  const [apiKey, setApiKey] = useState("");
  const [webhookUrl, setWebhookUrl] = useState("");

  const integrationCategories = [
    {
      id: "messaging",
      title: "–ú–µ—Å—Å–µ–Ω–¥–∂–µ—Ä—ã",
      icon: MessageSquare,
      integrations: [
        {
          name: "Telegram Bot",
          description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Telegram –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö –æ—Ç–≤–µ—Ç–æ–≤",
          icon: "üì±",
          fields: ["Bot Token", "Webhook URL"]
        },
        {
          name: "WhatsApp Business",
          description: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ WhatsApp Business API",
          icon: "üí¨",
          fields: ["Phone Number ID", "Access Token"]
        },
        {
          name: "VK –°–æ–æ–±—â–µ—Å—Ç–≤–∞",
          description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å VK –¥–ª—è —Å–æ–æ–±—â–µ—Å—Ç–≤–∞",
          icon: "üîµ",
          fields: ["Community Token", "Secret Key"]
        }
      ]
    },
    {
      id: "email",
      title: "Email",
      icon: Mail,
      integrations: [
        {
          name: "Gmail API",
          description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Gmail –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–∏—Å–µ–º",
          icon: "üìß",
          fields: ["Client ID", "Client Secret"]
        },
        {
          name: "Outlook 365",
          description: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Microsoft Outlook",
          icon: "üì®",
          fields: ["Tenant ID", "Application ID"]
        }
      ]
    },
    {
      id: "sms",
      title: "SMS",
      icon: Phone,
      integrations: [
        {
          name: "SMS.ru",
          description: "–û—Ç–ø—Ä–∞–≤–∫–∞ SMS —á–µ—Ä–µ–∑ SMS.ru",
          icon: "üì≤",
          fields: ["API ID", "Login", "Password"]
        },
        {
          name: "Twilio SMS",
          description: "SMS —á–µ—Ä–µ–∑ Twilio API",
          icon: "üì±",
          fields: ["Account SID", "Auth Token"]
        }
      ]
    },
    {
      id: "crm",
      title: "CRM —Å–∏—Å—Ç–µ–º—ã",
      icon: Globe,
      integrations: [
        {
          name: "AmoCRM",
          description: "–°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∞—Ü–∏—è —Å AmoCRM",
          icon: "üîó",
          fields: ["Domain", "Client ID", "Client Secret"]
        },
        {
          name: "–ë–∏—Ç—Ä–∏–∫—Å24",
          description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å –ë–∏—Ç—Ä–∏–∫—Å24",
          icon: "üè¢",
          fields: ["Portal URL", "Access Token"]
        }
      ]
    },
    {
      id: "ai",
      title: "–ò–ò —Å–µ—Ä–≤–∏—Å—ã",
      icon: Bot,
      integrations: [
        {
          name: "OpenAI GPT",
          description: "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ OpenAI –¥–ª—è —É–º–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤",
          icon: "ü§ñ",
          fields: ["API Key", "Organization ID"]
        },
        {
          name: "Yandex GPT",
          description: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å Yandex GPT",
          icon: "üß†",
          fields: ["API Key", "Folder ID"]
        }
      ]
    }
  ];

  const [activeIntegrations, setActiveIntegrations] = useState([
    { name: "Telegram Bot", status: "active", category: "messaging" },
    { name: "Gmail API", status: "active", category: "email" },
    { name: "SMS.ru", status: "warning", category: "sms" },
    { name: "OpenAI GPT", status: "active", category: "ai" }
  ]);

  const handleAddIntegration = () => {
    if (integrationName) {
      const newIntegration = {
        name: integrationName,
        status: "active",
        category: selectedCategory
      };
      setActiveIntegrations([...activeIntegrations, newIntegration]);
      
      toast({
        title: "–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∞ ‚úÖ",
        description: `${integrationName} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ (–¥–µ–º–æ —Ñ—É–Ω–∫—Ü–∏—è)`,
      });

      // –°–±—Ä–æ—Å —Ñ–æ—Ä–º—ã
      setIntegrationName("");
      setIntegrationDescription("");
      setApiKey("");
      setWebhookUrl("");
      setSelectedCategory("");
    }
  };

  const getStatusBadge = (status: string) => {
    switch (status) {
      case 'active':
        return <Badge className="bg-success/20 text-success"><Check className="h-3 w-3 mr-1" />–ê–∫—Ç–∏–≤–Ω–∞</Badge>;
      case 'warning':
        return <Badge className="bg-warning/20 text-warning">‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç –≤–Ω–∏–º–∞–Ω–∏—è</Badge>;
      case 'error':
        return <Badge variant="destructive"><X className="h-3 w-3 mr-1" />–û—à–∏–±–∫–∞</Badge>;
      default:
        return <Badge variant="outline">–ù–µ–∞–∫—Ç–∏–≤–Ω–∞</Badge>;
    }
  };

  const selectedCategoryData = integrationCategories.find(cat => cat.id === selectedCategory);

  return (
    <div className="p-6 space-y-6">
      <div className="flex items-center justify-between">
        <div className="flex items-center gap-3">
          <Zap className="h-8 w-8 text-primary" />
          <div>
            <h1 className="text-3xl font-bold">–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è–º–∏</h1>
            <p className="text-muted-foreground">–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –≤–Ω–µ—à–Ω–∏—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∏ API</p>
          </div>
        </div>
      </div>

      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">
        {/* –°–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</CardTitle>
            </CardHeader>
            <CardContent className="space-y-2">
              {integrationCategories.map((category) => {
                const Icon = category.icon;
                return (
                  <Button
                    key={category.id}
                    variant={selectedCategory === category.id ? "default" : "outline"}
                    className="w-full justify-start"
                    onClick={() => setSelectedCategory(category.id)}
                  >
                    <Icon className="h-4 w-4 mr-2" />
                    {category.title}
                    <Badge variant="secondary" className="ml-auto">
                      {category.integrations.length}
                    </Badge>
                  </Button>
                );
              })}
            </CardContent>
          </Card>

          {/* –ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–ê–∫—Ç–∏–≤–Ω—ã–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                {activeIntegrations.map((integration, index) => (
                  <div key={index} className="flex items-center justify-between p-2 border rounded">
                    <span className="text-sm font-medium">{integration.name}</span>
                    {getStatusBadge(integration.status)}
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>
        </div>

        {/* –°–ø–∏—Å–æ–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ */}
        <div className="space-y-4">
          {selectedCategoryData ? (
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center gap-2">
                  <selectedCategoryData.icon className="h-5 w-5" />
                  {selectedCategoryData.title}
                </CardTitle>
              </CardHeader>
              <CardContent>
                <div className="space-y-3">
                  {selectedCategoryData.integrations.map((integration, index) => (
                    <div key={index} className="border rounded-lg p-4 hover:bg-accent/20 transition-colors">
                      <div className="flex items-center gap-3 mb-2">
                        <span className="text-xl">{integration.icon}</span>
                        <div>
                          <h3 className="font-medium">{integration.name}</h3>
                          <p className="text-sm text-muted-foreground">{integration.description}</p>
                        </div>
                      </div>
                      <div className="text-xs text-muted-foreground mb-2">
                        –ü–æ–ª—è: {integration.fields.join(", ")}
                      </div>
                      <Button 
                        size="sm" 
                        variant="outline" 
                        className="w-full"
                        onClick={() => setIntegrationName(integration.name)}
                      >
                        <Plus className="h-4 w-4 mr-2" />
                        –ü–æ–¥–∫–ª—é—á–∏—Ç—å
                      </Button>
                    </div>
                  ))}
                </div>
              </CardContent>
            </Card>
          ) : (
            <Card>
              <CardContent className="text-center py-8">
                <Zap className="h-12 w-12 text-muted-foreground mx-auto mb-4" />
                <p className="text-muted-foreground">–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</p>
              </CardContent>
            </Card>
          )}
        </div>

        {/* –§–æ—Ä–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏ */}
        <div className="space-y-4">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center gap-2">
                <Plus className="h-5 w-5" />
                –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div>
                <Label htmlFor="integration-name">–ù–∞–∑–≤–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏</Label>
                <Input
                  id="integration-name"
                  value={integrationName}
                  onChange={(e) => setIntegrationName(e.target.value)}
                  placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: Telegram Bot"
                />
              </div>

              <div>
                <Label htmlFor="integration-category">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</Label>
                <Select value={selectedCategory} onValueChange={setSelectedCategory}>
                  <SelectTrigger>
                    <SelectValue placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é" />
                  </SelectTrigger>
                  <SelectContent>
                    {integrationCategories.map((category) => (
                      <SelectItem key={category.id} value={category.id}>
                        {category.title}
                      </SelectItem>
                    ))}
                  </SelectContent>
                </Select>
              </div>

              <div>
                <Label htmlFor="integration-description">–û–ø–∏—Å–∞–Ω–∏–µ</Label>
                <Textarea
                  id="integration-description"
                  value={integrationDescription}
                  onChange={(e) => setIntegrationDescription(e.target.value)}
                  placeholder="–ö—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–∏..."
                  rows={3}
                />
              </div>

              <div>
                <Label htmlFor="api-key">API –∫–ª—é—á</Label>
                <Input
                  id="api-key"
                  type="password"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ API –∫–ª—é—á"
                />
              </div>

              <div>
                <Label htmlFor="webhook-url">Webhook URL (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)</Label>
                <Input
                  id="webhook-url"
                  value={webhookUrl}
                  onChange={(e) => setWebhookUrl(e.target.value)}
                  placeholder="https://example.com/webhook"
                />
              </div>

              <Button 
                onClick={handleAddIntegration}
                className="w-full"
                disabled={!integrationName || !selectedCategory}
              >
                <Plus className="h-4 w-4 mr-2" />
                –î–æ–±–∞–≤–∏—Ç—å –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—é
              </Button>
            </CardContent>
          </Card>

          {/* –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ */}
          <Card>
            <CardHeader>
              <CardTitle className="text-lg">–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞</CardTitle>
            </CardHeader>
            <CardContent className="space-y-3">
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">–í—Å–µ–≥–æ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–π</span>
                <span className="font-bold">{activeIntegrations.length}</span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">–ê–∫—Ç–∏–≤–Ω—ã—Ö</span>
                <span className="font-bold text-success">
                  {activeIntegrations.filter(i => i.status === 'active').length}
                </span>
              </div>
              <div className="flex justify-between">
                <span className="text-sm text-muted-foreground">–¢—Ä–µ–±—É—é—Ç –≤–Ω–∏–º–∞–Ω–∏—è</span>
                <span className="font-bold text-warning">
                  {activeIntegrations.filter(i => i.status === 'warning').length}
                </span>
              </div>
            </CardContent>
          </Card>
        </div>
      </div>
    </div>
  );
};

export default AddIntegration;